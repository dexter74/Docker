##################
# Docker Compose #
##################


https://github.com/compose-spec/compose-spec/blob/master/spec.md


version: 'X'
services:
  XXX:
    container_name:
    restart:<no, always, on-failure, unless-stopped>
    container_name: <name>
    image: <image_docker_hub>:<version>
    volumes:
      - <nomduvolume>:<Path de montage dans le conteneur>
      - /path_du_volume:<Path de montage dans le conteneur>
      - /path_du_volume/maconfig.conf:<Path de montage dans le conteneur>/maconfig.conf
      
    ports:
      - "<Port extérieur>:<Port applicatif>"
      
    expose:
      - "XXXX"




############################
# Dockerfile (Build Image) #
############################
# FROM        : Définit l'image de base qui sera utilisée par les instructions suivantes.
# LABEL       : Ajoute des métadonnées à l'image avec un système de clés-valeurs, permet par exemple d'indiquer à l'utilisateur l'auteur du Dockerfile.
# ARG         : Variables temporaires qu'on peut utiliser dans un Dockerfile.
# ENV         : Variables d'environnements utilisables dans votre Dockerfile et conteneur.
# RUN         : Exécute des commandes Linux ou Windows lors de la création de l'image. Chaque instruction RUN va créer une couche en cache qui sera réutilisée dans le cas de modification ultérieure du Dockerfile.
# COPY        : Permet de copier des fichiers depuis notre machine locale vers le conteneur Docker.
# ADD         : Même chose que COPY mais prend en charge des liens ou des archives (si le format est reconnu, alors il sera décompressé à la volée).
# ENTRYPOINT  : comme son nom l'indique, c'est le point d'entrée de votre conteneur, en d'autres termes, c'est la commande qui sera toujours exécutée au démarrage du conteneur. Il prend la forme de tableau JSON (ex : CMD ["cmd1","cmd1"]) ou de texte.
# CMD         : Spécifie les arguments qui seront envoyés au ENTRYPOINT, (on peut aussi l'utiliser pour lancer des commandes par défaut lors du démarrage d'un conteneur). Si il est utilisé pour fournir des arguments par défaut pour l'instruction ENTRYPOINT, alors les instructions CMD et ENTRYPOINT doivent être spécifiées au format de tableau JSON.
# WORKDIR     : Définit le répertoire de travail qui sera utilisé pour le lancement des commandes CMD et/ou ENTRYPOINT et ça sera aussi le dossier courant lors du démarrage du conteneur.
# EXPOSE      : Expose un port.
# VOLUMES     : Crée un point de montage qui permettra de persister les données.
# USER        : Désigne quel est l'utilisateur qui lancera les prochaines instructions RUN, CMD ou ENTRYPOINT (par défaut c'est l'utilisateur root).

