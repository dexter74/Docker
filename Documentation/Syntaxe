##################
# Docker Compose #
##################
# Documentation :  https://github.com/compose-spec/compose-spec/blob/master/spec.md
#               :  https://docs.docker.com/compose/compose-file/compose-file-v2

version: 'X'
services:
  <Nom_du_service>:    
    command: batch -c ""
    
    command:
        --ssl
        --sslcert /certs/portainer.crt
        --sslkey /certs/portainer.key
    
    PUID: 'ID USER'
    PGID: 'ID GROUP'
    
    container_name: <Nom_du_conteneur>
    credential_spec:
      file: my-credential-spec.json
      
    depends_on:
      - <Nom_du_service>

    condition: <service_healthy|service_started>
    
    dns: 8.8.8.8
    dns: 
      - 8.8.8.8
      - 192.168.1.1
      
    domainname: mondomaine.com (mail.mondomaine.com)
    entrypoint: /code/entrypoint.sh
    
    env_file: .env
    env_file:
      - ./a.env
      - ./b.env
    
    environment:
      - XXXX=YYYY
      ou 
      XXXX: 'YYYY'
    
    
    expose: Ces ports DOIVENT être accessibles aux services liés et NE DEVRAIENT PAS être publiés sur la machine hôte.
      - 'XXXX'
    
    external_links: 
      - 'XXXX'
      
    extra_hosts:
      - 'nomdeserveur:adresse'
      - 'localhost:192.168.1.20'
    
    group-add:
      - 'xXXX'
    
    healthcheck:
      disable: true    
      test: ["CMD", "curl", "-f", "http://localhost"] 
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      test: curl -f https://localhost || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      

    hostname: 'Nom_de_la_Machine'
      
    image: <projet>/<image_docker_hub>:<tag>
      
    init: true
    labels:
      com.example.description: "Accounting webapp"
      com.example.department: "Finance"
      com.example.label-with-empty-value: ""
      ou 
      - com.example.description: "Accounting webapp"
      - com.example.department: "Finance"
      - com.example.label-with-empty-value: ""
       
    links:
      - db
      - db:database
      - <service>:<alias>
    
    logging
      driver: syslog
      options:
        syslog-address: "tcp://192.168.0.42:123"
    

    network_mode: "<host|none|bridge>"
   
    networks: # Définit les réseaux qui sont rattachés aux services.
      - none
      - bridge
      - host
      
      - LAN
        aliases:
          - Plex
        ipv4_address: 176.16.X.X.X
    
      - VLAN:
        ipam:
          driver: default
            - subnet: "172.16.X.0/24"


    mac_address: ab:cd:ef:gh:ij:kl
    pid
    platform: <osx | Windows/amd64 | linux/arm64/v8>
    
    ports:
      - "<Port extérieur>:<Port applicatif>"
      - "<Port exterieur>-<Port extérieur>:<Port applicatif>-<Port applicatif>"   # Range
      
      - target: <port>
        published: <port>
        protocol: <tcp|udp>
        mode: <host|ingress>
      
    privileged: true|false
    pull_policy: <always|never|if_not_present|build>
    read_only: "true|false"
    restart:<no, always, on-failure, unless-stopped>
    
    sysctls:
      net.core.somaxconn: 1024
      ou
      - net.core.somaxconn: 1024
    
    tmpfs: /run
    tmpfs:
      - /run
      - /tmp
    
    tty:
    
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000

    user: <défini l'utilisateur qui lance le conteneur>
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Permet de pouvoir interagir avec Docker Hôte (Gestion conteneur, commande vers l'hôte) 
      - <nomduvolume>:<Path de montage dans le conteneur>
      - /path_du_volume:<Path de montage dans le conteneur>
      - /path_du_volume/maconfig.conf:<Path de montage dans le conteneur>/maconfig.conf
      - type: <volume|bind|tmpfs|npipe>
        source: <source>
        target: <targe>
        read_only: "true|false"
        bind: "nomdemonbin"
          propagation: "true|false"
        volume:
          nocopy: ""
        tpmfs: 
          size: ""   
        consistency: ""
        
    volumes_from:
      - service_name
      - service_name:ro
      - container:container_name
      - container:container_name:rw
      
    working_dir: <>

############################
# Dockerfile (Build Image) #
############################
# FROM        : Définit l'image de base qui sera utilisée par les instructions suivantes.
# LABEL       : Ajoute des métadonnées à l'image avec un système de clés-valeurs, permet par exemple d'indiquer à l'utilisateur l'auteur du Dockerfile.
# ARG         : Variables temporaires qu'on peut utiliser dans un Dockerfile.
# ENV         : Variables d'environnements utilisables dans votre Dockerfile et conteneur.
# RUN         : Exécute des commandes Linux ou Windows lors de la création de l'image. Chaque instruction RUN va créer une couche en cache qui sera réutilisée dans le cas de modification ultérieure du Dockerfile.
# COPY        : Permet de copier des fichiers depuis notre machine locale vers le conteneur Docker.
# ADD         : Même chose que COPY mais prend en charge des liens ou des archives (si le format est reconnu, alors il sera décompressé à la volée).
# ENTRYPOINT  : comme son nom l'indique, c'est le point d'entrée de votre conteneur, en d'autres termes, c'est la commande qui sera toujours exécutée au démarrage du conteneur. Il prend la forme de tableau JSON (ex : CMD ["cmd1","cmd1"]) ou de texte.
# CMD         : Spécifie les arguments qui seront envoyés au ENTRYPOINT, (on peut aussi l'utiliser pour lancer des commandes par défaut lors du démarrage d'un conteneur). Si il est utilisé pour fournir des arguments par défaut pour l'instruction ENTRYPOINT, alors les instructions CMD et ENTRYPOINT doivent être spécifiées au format de tableau JSON.
# WORKDIR     : Définit le répertoire de travail qui sera utilisé pour le lancement des commandes CMD et/ou ENTRYPOINT et ça sera aussi le dossier courant lors du démarrage du conteneur.
# EXPOSE      : Expose un port.
# VOLUMES     : Crée un point de montage qui permettra de persister les données.
# USER        : Désigne quel est l'utilisateur qui lancera les prochaines instructions RUN, CMD ou ENTRYPOINT (par défaut c'est l'utilisateur root).

